Q1JFQVRFIE9SIFJFUExBQ0UgUFJPQ0VEVVJFIFhQUk9DX0RETF9GSUxURVJTIEFVVEhJRCBDVVJSRU5UX1VTRVIgQVMgLS0tRklMVFJPUyBERSBTQUxJREEgREJNUwpCRUdJTgogICAgICAgIEVYRUNVVEUgSU1NRURJQVRFICcgICAgICAgICAKICAgICAgICBCRUdJTgogICAgICAgICAgICBEQk1TX01FVEFEQVRBLlNFVF9UUkFOU0ZPUk1fUEFSQU0oREJNU19NRVRBREFUQS5TRVNTSU9OX1RSQU5TRk9STSwnJ1NUT1JBR0UnJyxGQUxTRSk7CiAgICAgICAgICAgIERCTVNfTUVUQURBVEEuU0VUX1RSQU5TRk9STV9QQVJBTShEQk1TX01FVEFEQVRBLlNFU1NJT05fVFJBTlNGT1JNLCcnVEFCTEVTUEFDRScnLEZBTFNFKTsKICAgICAgICAgICAgREJNU19NRVRBREFUQS5TRVRfVFJBTlNGT1JNX1BBUkFNKERCTVNfTUVUQURBVEEuU0VTU0lPTl9UUkFOU0ZPUk0sJydTRUdNRU5UX0FUVFJJQlVURVMnJywgRkFMU0UpOwogICAgICAgICAgICBEQk1TX01FVEFEQVRBLlNFVF9UUkFOU0ZPUk1fUEFSQU0oREJNU19NRVRBREFUQS5TRVNTSU9OX1RSQU5TRk9STSwnJ1JFRl9DT05TVFJBSU5UUycnLCBGQUxTRSk7CiAgICAgICAgICAgIERCTVNfTUVUQURBVEEuU0VUX1RSQU5TRk9STV9QQVJBTShEQk1TX01FVEFEQVRBLlNFU1NJT05fVFJBTlNGT1JNLCcnQ09OU1RSQUlOVFMnJywgVFJVRSk7CiAgICAgICAgICAgIERCTVNfTUVUQURBVEEuU0VUX1RSQU5TRk9STV9QQVJBTShEQk1TX01FVEFEQVRBLlNFU1NJT05fVFJBTlNGT1JNLCcnRU1JVF9TQ0hFTUEnJyxGQUxTRSk7CiAgICAgICAgICAgIERCTVNfTUVUQURBVEEuU0VUX1RSQU5TRk9STV9QQVJBTShEQk1TX01FVEFEQVRBLlNFU1NJT05fVFJBTlNGT1JNLCcnU0VHTUVOVF9DUkVBVElPTicnLEZBTFNFKTsKICAgICAgICAgICAgREJNU19NRVRBREFUQS5TRVRfVFJBTlNGT1JNX1BBUkFNKERCTVNfTUVUQURBVEEuU0VTU0lPTl9UUkFOU0ZPUk0sJydDT05TVFJBSU5UU19BU19BTFRFUicnLEZBTFNFKTsKICAgICAgICAgICAgREJNU19NRVRBREFUQS5TRVRfVFJBTlNGT1JNX1BBUkFNKERCTVNfTUVUQURBVEEuU0VTU0lPTl9UUkFOU0ZPUk0sJydTUUxURVJNSU5BVE9SJycsIFRSVUUpOwogICAgICAgICAgICBEQk1TX01FVEFEQVRBLlNFVF9UUkFOU0ZPUk1fUEFSQU0oREJNU19NRVRBREFUQS5TRVNTSU9OX1RSQU5TRk9STSwnJ1BSRVRUWScnLCBUUlVFKTsKICAgICAgICAKICAgICAgICBFTkQ7JzsKICAgICAgICAKICAgICAgICBFWENFUFRJT04gV0hFTiBPVEhFUlMgVEhFTiBSQUlTRV9BUFBMSUNBVElPTl9FUlJPUigtMjAwMDMsICdFcnJvciBlbiBwcm9jZXNvIHN1c2NyaXB0b3IgZGUgaW50ZXJwb2xhY2lvbiBkZSBtZXRhZGF0b3MuICd8fFNRTEVSUk0pOwpFTkQ7Ci0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KQ1JFQVRFIE9SIFJFUExBQ0UgUFJPQ0VEVVJFIFhQUk9DX0RBVEFUWVBFU19NU1NRTCBBVVRISUQgQ1VSUkVOVF9VU0VSIEFTIC0tQ0FUQUxPR08gVElQT1MgKyBSRVNFUlZBREFTCiAgICBUQUJOQU1FIFZBUkNIQVIyKDMwKTo9ICdYVEFCTEVfREFUQVRZUEVTX0NBVEFMT0dVRSc7CkJFR0lOCiAgICAKICAgIEJFR0lOICAgIAogICAgICAgIEVYRUNVVEUgSU1NRURJQVRFICdEUk9QIFRBQkxFICd8fFRBQk5BTUU7CiAgICAgICAgRVhDRVBUSU9OIFdIRU4gT1RIRVJTIFRIRU4gTlVMTDsgICAgCiAgICBFTkQ7CiAgICAKICAgIEVYRUNVVEUgSU1NRURJQVRFICdDUkVBVEUgVEFCTEUgJ3x8IFRBQk5BTUUgfHwnIChPUkFUWVBFIFZBUkNIQVIyKDEwMCksIE1TU1FMVFlQRSBWQVJDSEFSMigyMDApKSc7ICAgICAgICAKICAgIAogICAgRVhFQ1VURSBJTU1FRElBVEUgCiAgICAnCiAgICAgQkVHSU4KICAgICBJTlNFUlQgSU5UTyAnfHxUQUJOQU1FfHwnIFZBTFVFUygnJ05VTUJFUigxOSknJywnJ0JJR0lOVCcnKTsKICAgICBJTlNFUlQgSU5UTyAnfHxUQUJOQU1FfHwnIFZBTFVFUygnJ1JBVycnLCcnQklOQVJZJycpOwogICAgIElOU0VSVCBJTlRPICd8fFRBQk5BTUV8fCcgVkFMVUVTKCcnTlVNQkVSKDMpJycsJydCSVQnJyk7CiAgICAgSU5TRVJUIElOVE8gJ3x8VEFCTkFNRXx8JyBWQUxVRVMoJydDSEFSJycsJydDSEFSJycpOwogICAgIElOU0VSVCBJTlRPICd8fFRBQk5BTUV8fCcgVkFMVUVTKCcnREFURScnLCcnREFURScnKTsKICAgICBJTlNFUlQgSU5UTyAnfHxUQUJOQU1FfHwnIFZBTFVFUygnJ05VTUJFUicnLCcnREVDSU1BTCcnKTsKICAgICBJTlNFUlQgSU5UTyAnfHxUQUJOQU1FfHwnIFZBTFVFUygnJ0ZMT0FUJycsJydGTE9BVCcnKTsKICAgICBJTlNFUlQgSU5UTyAnfHxUQUJOQU1FfHwnIFZBTFVFUygnJ0xPTkcgUkFXJycsJydJTUFHRScnKTsKICAgICBJTlNFUlQgSU5UTyAnfHxUQUJOQU1FfHwnIFZBTFVFUygnJ05VTUJFUigxMCknJywnJ0lOVEVHRVInJyk7CiAgICAgSU5TRVJUIElOVE8gJ3x8VEFCTkFNRXx8JyBWQUxVRVMoJydOVU1CRVIoMTksNCknJywnJ01PTkVZJycpOwogICAgIElOU0VSVCBJTlRPICd8fFRBQk5BTUV8fCcgVkFMVUVTKCcnTkNIQVInJywnJ05DSEFSJycpOwogICAgIElOU0VSVCBJTlRPICd8fFRBQk5BTUV8fCcgVkFMVUVTKCcnTE9ORycnLCcnTlRFWFQnJyk7CiAgICAgSU5TRVJUIElOVE8gJ3x8VEFCTkFNRXx8JyBWQUxVRVMoJydGTE9BVCgyMyknJywnJ1JFQUwnJyk7CiAgICAgSU5TRVJUIElOVE8gJ3x8VEFCTkFNRXx8JyBWQUxVRVMoJydMT05HJycsJydURVhUJycpOwogICAgIElOU0VSVCBJTlRPICd8fFRBQk5BTUV8fCcgVkFMVUVTKCcnTlVNQkVSKDMpJycsJydUSU5ZSU5UJycpOwogICAgIElOU0VSVCBJTlRPICd8fFRBQk5BTUV8fCcgVkFMVUVTKCcnVkFSQ0hBUjInJywnJ1ZBUkNIQVInJyk7ICAgCiAgICAgSU5TRVJUIElOVE8gJ3x8VEFCTkFNRXx8JyBWQUxVRVMoJydFTkFCTEUnJywnJycnKTsgIAogICAgIElOU0VSVCBJTlRPICd8fFRBQk5BTUV8fCcgVkFMVUVTKCcnVE9fQ0hBUignJywnJ0NPTlZFUlQoVkFSQ0hBUiwnJyk7CiAgICAgSU5TRVJUIElOVE8gJ3x8VEFCTkFNRXx8JyBWQUxVRVMoJydDSEFSKScnLCcnKScnKTsKICAgICBJTlNFUlQgSU5UTyAnfHxUQUJOQU1FfHwnIFZBTFVFUygnJ0lOVEVSVkFMIFlFQVIgKDIpIFRPIE1PTlRIJycsJydWQVJDSEFSKDMwKScnKTsKICAgICBJTlNFUlQgSU5UTyAnfHxUQUJOQU1FfHwnIFZBTFVFUygnJ0ZMT0FUKDU0KScnLCcnRkxPQVQnJyk7CiAgICAgSU5TRVJUIElOVE8gJ3x8VEFCTkFNRXx8JyBWQUxVRVMoJydGTE9BVCg1NSknJywnJ0ZMT0FUJycpOwogICAgIElOU0VSVCBJTlRPICd8fFRBQk5BTUV8fCcgVkFMVUVTKCcnRkxPQVQoNTYpJycsJydGTE9BVCcnKTsKICAgICBJTlNFUlQgSU5UTyAnfHxUQUJOQU1FfHwnIFZBTFVFUygnJ0ZMT0FUKDU3KScnLCcnRkxPQVQnJyk7CiAgICAgSU5TRVJUIElOVE8gJ3x8VEFCTkFNRXx8JyBWQUxVRVMoJydGTE9BVCg1OCknJywnJ0ZMT0FUJycpOwogICAgIElOU0VSVCBJTlRPICd8fFRBQk5BTUV8fCcgVkFMVUVTKCcnRkxPQVQoNTkpJycsJydGTE9BVCcnKTsKICAgICBJTlNFUlQgSU5UTyAnfHxUQUJOQU1FfHwnIFZBTFVFUygnJ0ZMT0FUKDYwKSknJywnJ0ZMT0FUJycpOwogICAgIElOU0VSVCBJTlRPICd8fFRBQk5BTUV8fCcgVkFMVUVTKCcnRkxPQVQoNjEpJycsJydGTE9BVCcnKTsKICAgICBJTlNFUlQgSU5UTyAnfHxUQUJOQU1FfHwnIFZBTFVFUygnJ0ZMT0FUKDYyKScnLCcnRkxPQVQnJyk7CiAgICAgSU5TRVJUIElOVE8gJ3x8VEFCTkFNRXx8JyBWQUxVRVMoJydGTE9BVCg2MyknJywnJ0ZMT0FUJycpOwogICAgIElOU0VSVCBJTlRPICd8fFRBQk5BTUV8fCcgVkFMVUVTKCcnRkxPQVQoNjQpJycsJydGTE9BVCcnKTsKICAgICBJTlNFUlQgSU5UTyAnfHxUQUJOQU1FfHwnIFZBTFVFUygnJ0ZMT0FUKDY1KScnLCcnRkxPQVQnJyk7CiAgICAgSU5TRVJUIElOVE8gJ3x8VEFCTkFNRXx8JyBWQUxVRVMoJydGTE9BVCg2NiknJywnJ0ZMT0FUJycpOwogICAgIElOU0VSVCBJTlRPICd8fFRBQk5BTUV8fCcgVkFMVUVTKCcnRkxPQVQoNjcpJycsJydGTE9BVCcnKTsKICAgICBJTlNFUlQgSU5UTyAnfHxUQUJOQU1FfHwnIFZBTFVFUygnJ0ZMT0FUKDY4KScnLCcnRkxPQVQnJyk7CiAgICAgSU5TRVJUIElOVE8gJ3x8VEFCTkFNRXx8JyBWQUxVRVMoJydGTE9BVCg2OSknJywnJ0ZMT0FUJycpOwogICAgIElOU0VSVCBJTlRPICd8fFRBQk5BTUV8fCcgVkFMVUVTKCcnRkxPQVQoNzApJycsJydGTE9BVCcnKTsKICAgICBJTlNFUlQgSU5UTyAnfHxUQUJOQU1FfHwnIFZBTFVFUygnJ0ZMT0FUKDcxKScnLCcnRkxPQVQnJyk7CiAgICAgSU5TRVJUIElOVE8gJ3x8VEFCTkFNRXx8JyBWQUxVRVMoJydGTE9BVCg3MiknJywnJ0ZMT0FUJycpOwogICAgIElOU0VSVCBJTlRPICd8fFRBQk5BTUV8fCcgVkFMVUVTKCcnRkxPQVQoNzMpJycsJydGTE9BVCcnKTsKICAgICBJTlNFUlQgSU5UTyAnfHxUQUJOQU1FfHwnIFZBTFVFUygnJ0ZMT0FUKDc0KScnLCcnRkxPQVQnJyk7CiAgICAgSU5TRVJUIElOVE8gJ3x8VEFCTkFNRXx8JyBWQUxVRVMoJydGTE9BVCg3NSknJywnJ0ZMT0FUJycpOwogICAgIElOU0VSVCBJTlRPICd8fFRBQk5BTUV8fCcgVkFMVUVTKCcnRkxPQVQoNzYpJycsJydGTE9BVCcnKTsKICAgICBJTlNFUlQgSU5UTyAnfHxUQUJOQU1FfHwnIFZBTFVFUygnJ0ZMT0FUKDc3KScnLCcnRkxPQVQnJyk7CiAgICAgSU5TRVJUIElOVE8gJ3x8VEFCTkFNRXx8JyBWQUxVRVMoJydGTE9BVCg3OCknJywnJ0ZMT0FUJycpOwogICAgIElOU0VSVCBJTlRPICd8fFRBQk5BTUV8fCcgVkFMVUVTKCcnRkxPQVQoNzkpJycsJydGTE9BVCcnKTsKICAgICBJTlNFUlQgSU5UTyAnfHxUQUJOQU1FfHwnIFZBTFVFUygnJ0ZMT0FUKDgwKScnLCcnRkxPQVQnJyk7CiAgICAgSU5TRVJUIElOVE8gJ3x8VEFCTkFNRXx8JyBWQUxVRVMoJydGTE9BVCg4MSknJywnJ0ZMT0FUJycpOwogICAgIElOU0VSVCBJTlRPICd8fFRBQk5BTUV8fCcgVkFMVUVTKCcnRkxPQVQoODIpJycsJydGTE9BVCcnKTsKICAgICBJTlNFUlQgSU5UTyAnfHxUQUJOQU1FfHwnIFZBTFVFUygnJ0ZMT0FUKDgzKScnLCcnRkxPQVQnJyk7CiAgICAgSU5TRVJUIElOVE8gJ3x8VEFCTkFNRXx8JyBWQUxVRVMoJydGTE9BVCg4NCknJywnJ0ZMT0FUJycpOwogICAgIElOU0VSVCBJTlRPICd8fFRBQk5BTUV8fCcgVkFMVUVTKCcnRkxPQVQoODUpJycsJydGTE9BVCcnKTsKICAgICBJTlNFUlQgSU5UTyAnfHxUQUJOQU1FfHwnIFZBTFVFUygnJ0ZMT0FUKDg2KScnLCcnRkxPQVQnJyk7CiAgICAgSU5TRVJUIElOVE8gJ3x8VEFCTkFNRXx8JyBWQUxVRVMoJydGTE9BVCgxMDApJycsJydGTE9BVCcnKTsKICAgICBJTlNFUlQgSU5UTyAnfHxUQUJOQU1FfHwnIFZBTFVFUygnJ0ZMT0FUKDEyNiknJywnJ0ZMT0FUJycpOwogICAgIElOU0VSVCBJTlRPICd8fFRBQk5BTUV8fCcgVkFMVUVTKCcnVElNRVNUQU1QICg2KSBXSVRIIExPQ0FMIFRJTUUgWk9ORScnLCcnVkFSQ0hBUig1MCknJyk7CiAgICAgRU5EOyc7CiAgICAgCiAgICAgRVhDRVBUSU9OIFdIRU4gT1RIRVJTIFRIRU4gUkFJU0VfQVBQTElDQVRJT05fRVJST1IoLTIwMDAwLCAnRXJyb3IgZW4gcHJvY2VzbyBnZW5lcmFsaXphZG9yIGRlIGNhdGFsb2dvIGRlIHRpcG9zIGRlIGRhdG9zLid8fFNRTEVSUk0pOwogICAgCkVORDsKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQpDUkVBVEUgT1IgUkVQTEFDRSBQUk9DRURVUkUgWFBST0NfTUVUQURBVEFfQUxMKFVTUiBWQVJDSEFSMikgQVVUSElEIENVUlJFTlRfVVNFUiBBUyAtLVNDUklQVCBPUkFDTEUgT0JKRVRPUwpCRUdJTgogICAgREJNU19PVVRQVVQuUFVUX0xJTkUoVVNSKTsKICAgIEJFR0lOIC0tT0JKRVRPUyBUQUJMQVMKICAgICAgICBCRUdJTgogICAgICAgICAgICBFWEVDVVRFIElNTUVESUFURSAnRFJPUCBUQUJMRSBYVEFCTEVfU0NSSVBUUyc7CiAgICAgICAgICAgIEVYQ0VQVElPTiBXSEVOIE9USEVSUyBUSEVOIE5VTEw7ICAgICAgICAKICAgICAgICBFTkQ7CiAgICAgICAgRVhFQ1VURSBJTU1FRElBVEUgJ0NSRUFURSBUQUJMRSBYVEFCTEVfU0NSSVBUUyBBUyBTRUxFQ1QgVE9fQ0hBUihEQk1TX01FVEFEQVRBLkdFVF9EREwoICcnVEFCTEUnJyxUQUJMRV9OQU1FLCcnJ3x8VVNSfHwnJycpKSBTQ1JJUFQgRlJPTSBBTExfVEFCTEVTIFdIRVJFIE9XTkVSID0gJycnfHxVU1J8fCcnJyc7ICAgCiAgICAgICAgCiAgICAgICAgRVhDRVBUSU9OIFdIRU4gT1RIRVJTIFRIRU4gUkFJU0VfQVBQTElDQVRJT05fRVJST1IoLTIwMDAwLCAnRXJyb3IgZW4gcHJvY2VzbyBnZW5lcmFsaXphZG9yIGRlIFNjcmlwdCBEREwgcGFyYSBUYWJsYXMuICd8fFNRTEVSUk0pOwogICAgRU5EOwogICAgQ09NTUlUOwogICAgQkVHSU4gICAgLS1SRUYgQ09OU1RSQUlOVFMKICAgIAogICAgICAgIEJFR0lOCiAgICAgICAgICAgIEVYRUNVVEUgSU1NRURJQVRFICdEUk9QIFRBQkxFIFhDT05TVFJBSU5UU19SRUZFUkVOQ0lBTFMnOwogICAgICAgICAgICBFWENFUFRJT04gV0hFTiBPVEhFUlMgVEhFTiBOVUxMOwogICAgICAgIEVORDsKICAgICAgICAKICAgICAgICBFWEVDVVRFIElNTUVESUFURSAnCiAgICAgICAgICAgICAgICBDUkVBVEUgVEFCTEUgWENPTlNUUkFJTlRTX1JFRkVSRU5DSUFMUyBBUwogICAgICAgICAgICAgICAgU0VMRUNUIFRPX0NIQVIoREJNU19NRVRBREFUQS5HRVRfREVQRU5ERU5UX0RETCgnJ1JFRl9DT05TVFJBSU5UJycsIFRBQkxFX05BTUUsICcnJ3x8VVNSfHwnJycpKSBERExTQ1JJUFQgRlJPTSBBTExfVEFCTEVTIFQKICAgICAgICAgICAgICAgIFdIRVJFIEVYSVNUUyAoU0VMRUNUIDMzIEZST00gQUxMX0NPTlNUUkFJTlRTIFdIRVJFIFRBQkxFX05BTUUgPSBULlRBQkxFX05BTUUgQU5EIE9XTkVSID0gJycnfHxVU1J8fCcnJyBBTkQgQ09OU1RSQUlOVF9UWVBFID0gJydSJycpCiAgICAgICAgJzsgICAgCiAgICAgICAgICAgICAgICAgCiAgICAgICAgRVhDRVBUSU9OIFdIRU4gT1RIRVJTIFRIRU4gUkFJU0VfQVBQTElDQVRJT05fRVJST1IoLTIwMDAxLCAnRXJyb3IgZW4gcHJvY2VzbyBnZW5lcmFsaXphZG9yIGRlIFJlc3RyaWNjaW9uZXMgcmVmZXJlbmNpYWxlcy4gJ3x8U1FMRVJSTSk7CiAgICBFTkQ7ICAgCiAgICBDT01NSVQ7CiAgICBERUNMQVJFIC0tIE9CSkVUT1MgVklTVEFTCiAgICAgICAgVE1QIFZBUkNIQVIyKDQwMDApOwogICAgICAgIFRNUExPTkcgTE9ORzsKICAgICAgICBUTkFNRSBWQVJDSEFSMigyMDApOj0nWFZJRVdfU0NSSVBUUyc7CiAgICAgICAgCiAgICAgICAgWEMgVkFSQ0hBUjIoMjAwKTsKICAgIEJFR0lOICAgIAogICAgICAgIAogICAgICAgIEJFR0lOCiAgICAgICAgICAgIEVYRUNVVEUgSU1NRURJQVRFICdEUk9QIFRBQkxFICd8fFROQU1FOwogICAgICAgICAgICBFWENFUFRJT04gV0hFTiBPVEhFUlMgVEhFTiBOVUxMOwogICAgICAgIEVORDsKICAgICAgICAKICAgICAgICBFWEVDVVRFIElNTUVESUFURSAnQ1JFQVRFIFRBQkxFICd8fFROQU1FfHwnICgiU0NSSVBUIiBWQVJDSEFSMig0MDAwKSknOwogICAgICAgIAogICAgICAgIAogICAgICAgIEZPUiBYIElOIChTRUxFQ1QgVklFV19OQU1FLCBURVhUIEZST00gQUxMX1ZJRVdTIFdIRVJFIE9XTkVSID0gJyd8fFVTUnx8JycpIExPT1AKICAgICAgICAgICAgVE1QIDo9IFNVQlNUUihYLlRFWFQsIDEsIDMyMDApOwogICAgICAgICAgICAKICAgICAgICAgICAgQkVHSU4gICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgRVhFQ1VURSBJTU1FRElBVEUgKCdJTlNFUlQgSU5UTyAnfHxUTkFNRXx8JyBWQUxVRVMoJydDUkVBVEUgVklFVyAnfHxYLlZJRVdfTkFNRXx8JyBBUyAnfHxUTVB8fCc7JycpJyk7CiAgICAgICAgICAgICAgICBFWENFUFRJT04gV0hFTiBPVEhFUlMgVEhFTiBEQk1TX09VVFBVVC5QVVRfTElORShTUUxFUlJNKTsgICAgICAgIAogICAgICAgICAgICBFTkQ7CiAgICAgICAgRU5EIExPT1A7ICAgIAogICAgICAgIAogICAgICAgIEVYQ0VQVElPTiBXSEVOIE9USEVSUyBUSEVOIFJBSVNFX0FQUExJQ0FUSU9OX0VSUk9SKC0yMDAwMiwgJ0Vycm9yIGVuIHByb2Nlc28gZ2VuZXJhbGl6YWRvciBkZSBTY3JpcHQgRERMIHBhcmEgVmlzdGFzLiAnfHxTUUxFUlJNKTsKICAgIEVORDsgICAgCiAgICBDT01NSVQ7CiAgICBERUNMQVJFICAgLS0tTk9OQ0xVU1RFUkVEIElOREVYIEZPUiBOVUxMCiAgICAgICAgQ1VSU09SIENDIElTIFNFTEVDVCBBQy5DT05TVFJBSU5UX05BTUUgQ09OU05BTUUsIEFDLlRBQkxFX05BTUUgVEFCTkFNRSwgQ0NPTC5DT0xVTU5fTkFNRSBDT0xOQU1FIEZST00gQUxMX0NPTlNUUkFJTlRTIEFDICBJTk5FUiBKT0lOIAogICAgICAgICAgICBBTExfQ09OU19DT0xVTU5TIENDT0wgT04oQUMuQ09OU1RSQUlOVF9OQU1FID0gQ0NPTC5DT05TVFJBSU5UX05BTUUpOyAgIAogICAgICAgICAgICAKICAgICAgICBUTVBWQUwgQ0MlUk9XVFlQRTsgICAgCiAgICAgICAgVFlQRSBDQ1IgSVMgUkVGIENVUlNPUjsgICAgCiAgICAgICAgWENVUiBDQ1I7ICAgIAogICAgICAgIFRYQ1VSIENDUjsgICAgCiAgICAgICAgVE5BTUUgVkFSQ0hBUjIoMzAwKTsKICAgICAgICAKICAgICAgICBTUUxRSU5ERVggVkFSQ0hBUjIoNDApOj0gJ0NSRUFURSBVTklRVUUgTk9OQ0xVU1RFUkVEIElOREVYICc7CiAgICAgICAgU1FMUURST1AgVkFSQ0hBUjIoMzApOj0gJ0FMVEVSIFRBQkxFICc7CiAgICAgICAgU1FMUURPIFZBUkNIQVIyKDIwMCk6PSBTUUxRRFJPUDsKICAgIEJFR0lOCiAgICAgICAgCiAgICAgICAgT1BFTiBUWENVUiBGT1IgJ1NFTEVDVCBUQUJMRV9OQU1FIEZST00gQUxMX1RBQkxFUyBXSEVSRSBPV05FUiA9IDpEJyBVU0lORyBVU1I7CiAgICAgICAgTE9PUAogICAgICAgICAgICAKICAgICAgICAgICAgRkVUQ0ggVFhDVVIgSU5UTyBUTkFNRTsKICAgICAgICAgICAgCiAgICAgICAgICAgIEVYSVQgV0hFTiBUWENVUiVOT1RGT1VORDsKICAgICAgICAgICAgCiAgICAgICAgICAgIE9QRU4gWENVUiBGT1IgJ1NFTEVDVCBBQy5DT05TVFJBSU5UX05BTUUgQ09OU05BTUUsIEFDLlRBQkxFX05BTUUgVEFCTkFNRSwgQ0NPTC5DT0xVTU5fTkFNRSBDT0xOQU1FIEZST00gQUxMX0NPTlNUUkFJTlRTIEFDICBJTk5FUiBKT0lOIAogICAgICAgICAgICAgICAgQUxMX0NPTlNfQ09MVU1OUyBDQ09MIE9OKEFDLkNPTlNUUkFJTlRfTkFNRSA9IENDT0wuQ09OU1RSQUlOVF9OQU1FKSBXSEVSRSBBQy5PV05FUiA9ICcnJ3x8VVNSfHwnJycgQU5EIEFDLlRBQkxFX05BTUUgPSAnJyd8fFROQU1FfHwnJycgQU5EIAogICAgICAgICAgICAgICAgQ09OU1RSQUlOVF9UWVBFID0gJydVJycgQU5EIEFDLlNFQVJDSF9DT05ESVRJT04gSVMgTlVMTCc7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBMT09QICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIEZFVENIIFhDVVIgSU5UTyBUTVBWQUw7CiAgICAgICAgICAgICAgICBFWElUIFdIRU4gWENVUiVOT1RGT1VORDsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgU1FMUURPIDo9IFNRTFFETyB8fCBUTVBWQUwuVEFCTkFNRSB8fCAnIERST1AgQ09OU1RSQUlOVCAnfHxUTVBWQUwuQ09OU05BTUV8fCc7JzsKICAgICAgICAgICAgICAgIEVYRUNVVEUgSU1NRURJQVRFICdJTlNFUlQgSU5UTyBYVEFCTEVfU0NSSVBUUyBWQUxVRVMoOk4pJyBVU0lORyBTUUxRRE87CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIFNRTFFETyA6PSBTUUxRSU5ERVg7ICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBTUUxRRE8gOj0gU1FMUURPIHx8IFRNUFZBTC5DT05TTkFNRXx8JyBPTiAnfHxUTVBWQUwuVEFCTkFNRXx8JygnfHxUTVBWQUwuQ09MTkFNRXx8JykgV0hFUkUgJ3x8VE1QVkFMLkNPTE5BTUV8fCAnIElTIE5PVCBOVUxMOyc7CiAgICAgICAgICAgICAgICBFWEVDVVRFIElNTUVESUFURSAnSU5TRVJUIElOVE8gWFRBQkxFX1NDUklQVFMgVkFMVUVTKDpNKScgVVNJTkcgU1FMUURPOwogICAgICAgICAgICAgICAgU1FMUURPIDo9IFNRTFFEUk9QOwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIEVORCBMT09QOwogICAgICAgIEVORCBMT09QOwogICAgICAgIAogICAgICAgIEVYQ0VQVElPTiBXSEVOIE9USEVSUyBUSEVOIFJBSVNFX0FQUExJQ0FUSU9OX0VSUk9SKC0yMDAwMiwgJ0Vycm9yIGVuIHByb2Nlc28gZGUgcmVlbXBsYXpvIGRlIGluZGljZXMgcGFyYSBUYWJsYXMuICd8fFNRTEVSUk0pOwogICAgRU5EOyAgCiAgICBDT01NSVQ7CkVORDsKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQpDUkVBVEUgT1IgUkVQTEFDRSBQUk9DRURVUkUgWFBST0NfU1RBUlRfRE1MX0FDVElPTlMgKFVTUiBWQVJDSEFSMikgQVVUSElEIENVUlJFTlRfVVNFUiBBUyAgICAtLS1BTEwgRE1MCiAgIAogICBURE1MTkFNRSBWQVJDSEFSMigyMCk6PSAnWERNTF9BTEwnOyAgICAKICAgIAogICAgRlVOQ1RJT04gR0VOX0RNTChUTkFNRSBWQVJDSEFSMiwgVFNBVkUgVkFSQ0hBUjIsIFVTUiBWQVJDSEFSMikgUkVUVVJOIEJPT0xFQU4gIEFTICAgIAogICAgICAgIEZMQUcgQk9PTEVBTiA6PSBGQUxTRTsKICAgICAgICBNWUNVUiBJTlRFR0VSIERFRkFVTFQgREJNU19TUUwuT1BFTl9DVVJTT1I7ICAgICAKICAgICAgICBDT0xfVkFMIFZBUkNIQVIyKDQwMDApOyAKICAgICAgICBTVEFUVVMgSU5URUdFUjsKICAgICAgICAKICAgICAgICBUQUJfREVTQyBEQk1TX1NRTC5ERVNDX1RBQjsgCiAgICAgICAgQ09MX0NPVU5URVIgbnVtYmVyOyAKICAgICAgICBTUUxRIFZBUkNIQVIyKDMyMDAwKTsgCiAgICAgICAgCiAgICAgICAgU1FMRE1MX0JBU0UgVkFSQ0hBUjIoMzIwMDApOj0gJ0lOU0VSVCBJTlRPICd8fFROQU1FfHwnIFZBTFVFUygnOwogICAgICAgIFNRTERNTCBWQVJDSEFSMigzMjAwMCkgOj0gU1FMRE1MX0JBU0U7CiAgICAgICAgCiAgICAgICAgVERNTE5BTUUgVkFSQ0hBUjIoMjApOj0gVFNBVkU7CiAgICAgICAgCiAgICAgICAgT1JBVFlQRSBJTlRFR0VSOwogICAgICAgIAogICAgICAgIEJFR0lOICAgIAogICAgICAgICAgICBCRUdJTgogICAgICAgICAgICAgICAgU1FMUSA6PSAnU0VMRUNUICogRlJPTSAnfHxVU1J8fCcuJ3x8VE5BTUU7IAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBEQk1TX1NRTC5QQVJTRShNWUNVUixTUUxRLERCTVNfU1FMLk5BVElWRSk7ICAgICAgICAgCiAgICAgICAgICAgICAgICBEQk1TX1NRTC5ERVNDUklCRV9DT0xVTU5TKE1ZQ1VSLENPTF9DT1VOVEVSLCBUQUJfREVTQyk7IAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBGT1IgWCBJTiAxIC4uIENPTF9DT1VOVEVSIExPT1AgCiAgICAgICAgICAgICAgICAgICAgREJNU19TUUwuREVGSU5FX0NPTFVNTihNWUNVUiwgWCwgQ09MX1ZBTCwgNDAwMCk7IAogICAgICAgICAgICAgICAgRU5EIExPT1A7CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIFNUQVRVUyA6PSBEQk1TX1NRTC5FWEVDVVRFKE1ZQ1VSKTsgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIFdISUxFICggMCA8IERCTVNfU1FMLkZFVENIX1JPV1MoTVlDVVIpICkgTE9PUCAKICAgICAgICAgICAgICAgICAgICAgICAgRk9SIFggSU4gMSAuLiBDT0xfQ09VTlRFUiBMT09QICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBEQk1TX1NRTC5DT0xVTU5fVkFMVUUoTVlDVVIsIFgsIENPTF9WQUwpOyAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIE9SQVRZUEUgOj0gVEFCX0RFU0MoWCkuQ09MX1RZUEU7CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBDQVNFIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgV0hFTiAgT1JBVFlQRSA8PiAyIEFORCBPUkFUWVBFIDw+IDEwMCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qT1IgT1JBVFlQRSA9IDkgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBPUiBPUkFUWVBFID0gOTYgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBPUiBPUkFUWVBFID0gMTIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9SIE9SQVRZUEUgPSAyODYKICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9SIE9SQVRZUEUgPSAyODcKICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9SIE9SQVRZUEUgPSAxODcKICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9SIE9SQVRZUEUgPSAxODgKICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9SIE9SQVRZUEUgPSAyMzIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9SIE9SQVRZUEUgPSAxODkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9SIE9SQVRZUEUgPSAxOTAqLwogICAgICAgICAgICAgICAgICAgICAgICAgICAgVEhFTiAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDT0xfVkFMIDo9IFJFUExBQ0UoQ09MX1ZBTCwnJycnLCcnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTUUxETUwgOj0gU1FMRE1MIHx8ICcnJycgfHwgQ09MX1ZBTCB8fCAnJycnOyAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBFTFNFCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU1FMRE1MIDo9IFNRTERNTCB8fCBDT0xfVkFMOwogICAgICAgICAgICAgICAgICAgICAgICBFTkQgQ0FTRTsgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIElGIFggPSBDT0xfQ09VTlRFUiBUSEVOCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTUUxETUwgOj0gU1FMRE1MIHx8ICcpOyc7CiAgICAgICAgICAgICAgICAgICAgICAgIEVMU0UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNRTERNTCA6PSBTUUxETUwgfHwgJywnOwogICAgICAgICAgICAgICAgICAgICAgICBFTkQgSUY7CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBTUUxETUwgOj0gUkVQTEFDRShTUUxETUwsICcnJycnJywgJ05VTEwnKTsKICAgICAgICAgICAgICAgICAgICAgICAgU1FMRE1MIDo9IFJFUExBQ0UoU1FMRE1MLCAnKCwnLCAnKE5VTEwsJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIFNRTERNTCA6PSBSRVBMQUNFKFNRTERNTCwgJywpJywgJyxOVUxMKScpOwogICAgICAgICAgICAgICAgICAgICAgICBTUUxETUwgOj0gUkVQTEFDRShTUUxETUwsICcsLCcsICcsTlVMTCwnKTsKICAgICAgICAgICAgICAgICAgICBFTkQgTE9PUDsKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBTUUxETUwgOj0gUkVQTEFDRShTUUxETUwsICcnJycsICcnJycnJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBFWEVDVVRFIElNTUVESUFURSAnSU5TRVJUIElOVE8gJ3x8VERNTE5BTUV8fCcgVkFMVUVTKCcnJ3x8U1FMRE1MfHwnJycpJzsKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBTUUxETUwgOj0gU1FMRE1MX0JBU0U7CiAgICAgICAgICAgIEVORCBMT09QOyAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgREJNU19TUUwuQ0xPU0VfQ1VSU09SKE1ZQ1VSKTsgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIEZMQUcgOj0gTk9UIEZMQUc7CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIEVYQ0VQVElPTiBXSEVOIE9USEVSUyBUSEVOIFJBSVNFX0FQUExJQ0FUSU9OX0VSUk9SKC0yMDAxMCwgJ0Vycm9yIGVuIHByb2Nlc28gZ2VuZXJhbGl6YWRvciBkZSBTY3JpcHQgRE1MIEluc2VydHMuICd8fFNRTEVSUk0pOwogICAgICAgICAgICAgICAgLS1FWENFUFRJT04gV0hFTiBPVEhFUlMgVEhFTiBEQk1TX09VVFBVVC5QVVRfTElORShTUUxFUlJNKTsKICAgICAgICAgICAgRU5EOwogICAgICAgICAgICBSRVRVUk4gRkxBRzsKICAgICAgICBFTkQgR0VOX0RNTDsgICAgICAgIApCRUdJTgoKICAgIEJFR0lOCiAgICAgICAgRVhFQ1VURSBJTU1FRElBVEUgJ0RST1AgVEFCTEUgJ3x8VERNTE5BTUU7ICAgICAgICAKICAgICAgICBFWENFUFRJT04gV0hFTiBPVEhFUlMgVEhFTiBOVUxMOyAgICAKICAgIEVORDsKICAgICAgICAgICAgICAgIAogICAgQkVHSU4gICAgICAgICAgICAgICAgCiAgICAgICAgRVhFQ1VURSBJTU1FRElBVEUgJ0NSRUFURSBUQUJMRSAnfHxURE1MTkFNRXx8JyAoIlNFTlRFTkNFIiBWQVJDSEFSMig0MDAwKSknOwogICAgICAgIEVYQ0VQVElPTiBXSEVOIE9USEVSUyBUSEVOIE5VTEw7ICAgIAogICAgRU5EOyAgICAgICAKICAgIAogICAgRk9SIFggSU4gKFNFTEVDVCBUQUJMRV9OQU1FIFROIEZST00gQUxMX1RBQkxFUyBXSEVSRSBPV05FUiA9IFVTUikgTE9PUAogICAgICAgIElGIEdFTl9ETUwoWC5UTiwgVERNTE5BTUUsIFVTUikgVEhFTgogICAgICAgICAgICBOVUxMOyAgICAgICAgCiAgICAgICAgRU5EIElGOyAgICAgCiAgICBFTkQgTE9PUDsgICAKICAgICAgICAgICAKICAgIEVYQ0VQVElPTiBXSEVOIE9USEVSUyBUSEVOIFJBSVNFX0FQUExJQ0FUSU9OX0VSUk9SKC0yMDAxMSwgJ0Vycm9yIGVuIHByb2Nlc28gZ2VuZXJhbGl6YWRvciBleHRlcm5vIGRlIFNjcmlwdCBETUwgSW5zZXJ0cy4gJ3x8U1FMRVJSTSk7CiAgICAtLUVYQ0VQVElPTiBXSEVOIE9USEVSUyBUSEVOIERCTVNfT1VUUFVULlBVVF9MSU5FKFNRTEVSUk0pOwpFTkQ7Ci0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KQ1JFQVRFIE9SIFJFUExBQ0UgUFJPQ0VEVVJFIFhQUk9DX1NZTlRIRVRJWkVfQUxMIEFVVEhJRCBDVVJSRU5UX1VTRVIgQVMKICAgIFRNUCBWQVJDSEFSMig0MDAwKTsKICAgIFROQU1FIFZBUkNIQVIyKDUwMDApIDo9ICdYRERMX1RBQkxFJzsKQkVHSU4gICAgCiAgICAKICAgIEJFR0lOCiAgICAgICAgRVhFQ1VURSBJTU1FRElBVEUgJ0RST1AgVEFCTEUgJ3x8VE5BTUU7CiAgICAgICAgRVhDRVBUSU9OIFdIRU4gT1RIRVJTIFRIRU4gTlVMTDsgICAgICAgIAogICAgRU5EOwogICAgCiAgICBCRUdJTgogICAgICAgIEVYRUNVVEUgSU1NRURJQVRFICdDUkVBVEUgVEFCTEUgJ3x8VE5BTUV8fCcgKCJNU1NDUklQVCIgVkFSQ0hBUjIoNDAwMCkpJzsKICAgICAgICBFWENFUFRJT04gV0hFTiBPVEhFUlMgVEhFTiBOVUxMOwogICAgRU5EOwogICAgCiAgICBGT1IgU0MgSU4gKFNFTEVDVCBTQ1JJUFQgRlJPTSBYVEFCTEVfU0NSSVBUUykgTE9PUCAgICAgICAgICAKICAgICAgICBGT1IgWCBJTiAoU0VMRUNUICogRlJPTSBYVEFCTEVfREFUQVRZUEVTX0NBVEFMT0dVRSkgTE9PUCAgICAgCiAgICAgICAgCiAgICAgICAgICAgIFNDLlNDUklQVCA6PSBSRVBMQUNFKFNDLlNDUklQVCwnICd8fFguT1JBVFlQRSwgJyAnfHxYLk1TU1FMVFlQRSk7ICAgICAgICAgICAgICAgIAogICAgICAgIEVORCBMT09QOwogICAgICAgICAgICAgICAgCiAgICAgICAgRVhFQ1VURSBJTU1FRElBVEUgJ0lOU0VSVCBJTlRPICd8fFROQU1FfHwnIFZBTFVFUygnJyd8fFNDLlNDUklQVHx8JycnKSc7ICAgICAgIAogICAgICAgIAogICAgRU5EIExPT1A7CiAgICAKICAgIEVYRUNVVEUgSU1NRURJQVRFICdVUERBVEUgWENPTlNUUkFJTlRTX1JFRkVSRU5DSUFMUyBTRVQgRERMU0NSSVBUID0gUkVQTEFDRShERExTQ1JJUFQsICcnIEVOQUJMRScnICwgJycgJycpJzsKICAgICAgICAKICAgIEVYQ0VQVElPTiBXSEVOIE9USEVSUyBUSEVOIFJBSVNFX0FQUExJQ0FUSU9OX0VSUk9SKC0yMDAxNSwgJ0Vycm9yIGVuIHByb2Nlc28gZGUgc2ludGVzaXMgZGVsIERETCBPUkEtPk1TU1FMICd8fFNRTEVSUk0pOwpFTkQ7


BASE 64 ENCODER BY @CHECHESWAP








